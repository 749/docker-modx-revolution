name: Docker Build

on:
  push:
    # Publish `main` as Docker `edge` image.
    branches:
      - main
    # Publish `v1.2.3` tags as releases.
    tags:
      - v*
  pull_request:
  schedule:
    # run every Sunday at 00:00 UTC
    - cron: "0 0 * * 0"

env:
  IMAGE_NAME: modx-revolution
  IMAGE_TITLE: modx-revolution
  IMAGE_DESCRIPTION: Autoupdating Docker container for ModX Revolution > 2.7.0

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
        with:
          platforms: all

      - name: Set up Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to DockerHub
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Prepare
        id: prep
        run: |
          set -euo pipefail

          # Find the newest 2.X release from ModX repository
          MODX_VERSION=$(curl "https://api.github.com/repos/modxcms/revolution/tags" | jq -r '[.[]|select(.name | startswith("v2.")).name] | first')
          DOCKER_IMAGE=g749/$IMAGE_NAME

          if [ -z "$MODX_VERSION" ]; then
            echo "ERROR: modx version not found!"
            exit 1
          else
            echo "Found modx version: $MODX_VERSION"
          fi

          # Strip the 'v' prefix and any suffix after a hyphen
          VERSION_FULL=$(echo "${MODX_VERSION:1}" | sed 's,-.*$,,' )
          TAG_FULL="$VERSION_FULL"
          VERSION_MINOR=$(echo "$VERSION_FULL" | sed 's,\.[^.]*$,,' )
          VERSION_MAJOR=$(echo "$VERSION_MINOR" | sed 's,\.[^.]*$,,')

          # Override version for main branch and pull requests
          if [[ "${{ github.ref }}" == "refs/heads/main" ]]; then
            TAG_FULL=edge
          elif [[ "${{ github.ref }}" == refs/pull/* ]]; then
            TAG_FULL="pr-${{ github.event.number }}"
          fi

          TAGS="${DOCKER_IMAGE}:${TAG_FULL}"
          if [[ "$TAG_FULL" != "edge" && ${TAG_FULL:0:3} != "pr-" ]]; then
            TAGS="$TAGS,${DOCKER_IMAGE}:${VERSION_MINOR},${DOCKER_IMAGE}:${VERSION_MAJOR},${DOCKER_IMAGE}:latest"
          fi

          # Export values for later steps
          echo "MODX_VERSION=${VERSION_FULL}" >> $GITHUB_ENV
          echo "DOCKER_IMAGE=${DOCKER_IMAGE}" >> $GITHUB_ENV

          # Set step outputs for use in later steps
          echo "version=${VERSION_FULL}" >> $GITHUB_OUTPUT
          echo "tags=${TAGS}" >> $GITHUB_OUTPUT
          echo "created=$(date -u +'%Y-%m-%dT%H:%M:%SZ')" >> $GITHUB_OUTPUT

          echo "TAGS: ${TAGS}"

      - name: Build and push
        id: docker_build
        uses: docker/build-push-action@v6
        with:
          builder: ${{ steps.buildx.outputs.name }}
          context: build/
          platforms: linux/amd64,linux/arm64,linux/arm/v7
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.prep.outputs.tags }}
          cache-from: type=registry,ref=${{ env.DOCKER_IMAGE }}:cache
          cache-to: type=registry,ref=${{ env.DOCKER_IMAGE }}:cache,mode=max
          build-args: |
            MODX_VERSION="${{ steps.prep.outputs.version }}"
          labels: |
            org.opencontainers.image.title=$IMAGE_TITLE
            org.opencontainers.image.description=$IMAGE_DESCRIPTION
            org.opencontainers.image.vendor=g749
            org.opencontainers.image.url=${{ github.event.repository.html_url }}
            org.opencontainers.image.source=${{ github.event.repository.html_url }}
            org.opencontainers.image.created=${{ steps.prep.outputs.created }}
            org.opencontainers.image.revision=${{ github.sha }}
            org.opencontainers.image.version=${{ steps.prep.outputs.version }}
